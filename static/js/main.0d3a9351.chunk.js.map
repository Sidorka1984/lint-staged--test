{"version":3,"sources":["components/Counter/Controls.js","components/Counter/Value.js","components/Counter/Counter.js","components/Dropdown/Dropdown.js","components/ColorPicker/ColorPicker.js","components/TodoEditor/TodoEditor.js","components/Container/Container.js","components/TodoList/Form.js","components/Modal/Modal.js","App.js","index.js"],"names":["Controls","onIncrement","onDecrement","className","type","onClick","Value","value","Counter","state","props","initialValue","handlerIncrement","setState","prevState","handlerDecrement","this","React","Component","defaultProps","Container","children","modalRoot","document","querySelector","Modal","heandleKeyDown","e","code","console","log","onClose","heandleBackDropClick","event","currentTarget","target","window","addEventListener","removeEventListener","createPortal","App","todos","filter","showModal","addTodo","text","todo","id","shortid","generate","completed","deleteTodo","todoId","toggleCompleted","map","formSubmitHandler","data","setTimeout","changeFilter","getVisibleTodos","normalizedFilter","toLowerCase","includes","calculateCompletedTodos","reduce","total","togleModal","localStorage","getItem","parsedTodos","JSON","parse","prevProps","setItem","stringify","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d3a9351.chunk.js","sourcesContent":["import React from 'react';\n\nconst Controls = ({ onIncrement, onDecrement }) => (\n  <div className=\"Counter__controls\">\n    <button type=\"button\" onClick={onIncrement}>\n      Увеличить на 1\n    </button>\n    <button type=\"button\" onClick={onDecrement}>\n      Уменьшить на 1\n    </button>\n  </div>\n);\nexport default Controls;\n","import React from 'react';\n\nconst Value = ({ value }) => <span className=\"Counter__value\">{value}</span>;\n\nexport default Value;\n","import React from 'react';\nimport Controls from './Controls';\nimport Value from './Value';\nimport './Counter.css';\n\nclass Counter extends React.Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  state = {\n    value: this.props.initialValue,\n  };\n\n  handlerIncrement = () => {\n    this.setState(prevState => ({\n      value: prevState.value + 1,\n    }));\n  };\n\n  handlerDecrement = () => {\n    this.setState(prevState => ({\n      value: prevState.value - 1,\n    }));\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"Counter\">\n        <Value value={value} />\n\n        <Controls\n          onIncrement={this.handlerIncrement}\n          onDecrement={this.handlerDecrement}\n        />\n      </div>\n    );\n  }\n}\nexport default Counter;\n","import React, { Component } from 'react';\nimport './Dropdown.css';\n\nclass Dropdown extends Component {\n  state = {\n    visible: false,\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({\n      visible: !prevState.visible,\n    }));\n  };\n\n  show = () => {\n    this.setState({ visible: true });\n  };\n\n  hide = () => {\n    this.setState({ visible: false });\n  };\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <div className=\"Dropdown\">\n        <button\n          type=\"button\"\n          className=\"Dropdown__toggle\"\n          onClick={this.toggle}\n        >\n          {visible ? 'Скрыть' : 'Показать'}\n        </button>\n        {visible && <div className=\"Dropdown__menu\">Выпадающее меню</div>}\n      </div>\n    );\n  }\n}\n\nexport default Dropdown;\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './ColorPicker.css';\n\nclass ColorPicker extends Component {\n  state = {\n    activeOptionIdx: 0,\n  };\n\n  setActiveIdx = index => {\n    this.setState({ activeOptionIdx: index });\n  };\n\n  makeOptionClassName = index => {\n    return classNames('ColorPicker__option', {\n      'ColorPicker__option--active': index === this.state.activeOptionIdx,\n    });\n\n    //   console.log(clsx);\n\n    //   const optionClasses = ['ColorPicker__option'];\n    //   if (index === this.state.activeOptionIdx) {\n    //     optionClasses.push('ColorPicker__option--active');\n    //   }\n    //   return optionClasses.join(' ');\n  };\n\n  render() {\n    const { activeOptionIdx } = this.state;\n    const { options } = this.props;\n    const { label } = options[activeOptionIdx];\n\n    return (\n      <div className=\"ColorPicker\">\n        <h2 className=\"ColorPicker__title\">Color Picker</h2>\n        <p>Выбран цвет: {label}</p>\n        <div>\n          {this.props.options.map(({ label, color }, index) => (\n            <button\n              key={label}\n              className={classNames('ColorPicker__option', {\n                'ColorPicker__option--active': index === activeOptionIdx,\n              })}\n              style={{ backgroundColor: color }}\n              onClick={() => this.setActiveIdx(index)}\n            ></button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ColorPicker;\n","import React, { Component } from 'react';\nimport './TodoEditor.scss';\n\nclass TodoEditor extends Component {\n  state = {\n    message: '',\n  };\n\n  handleChange = e => {\n    this.setState({ message: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state.message);\n\n    this.setState({ message: '' });\n  };\n\n  render() {\n    return (\n      <form className=\"TodoEditor\" onSubmit={this.handleSubmit}>\n        <textarea\n          className=\"TodoEditor__textarea\"\n          value={this.state.message}\n          onChange={this.handleChange}\n        ></textarea>\n        <button type=\"submit\" className=\"TodoEditor__button\">\n          Сохранить\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default TodoEditor;\n","import React from 'react';\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","// import { render } from \"@testing-library/react\";\nimport React, { Component } from 'react';\nimport shortid from 'shortid';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    tag: '',\n    experience: 'junior',\n    licence: false,\n  };\n  nameInputId = shortid.generate();\n  tagInputId = shortid.generate();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  handleLicenceChange = e => {\n    console.log(e.currentTarget.checked);\n    this.setState({ licence: e.currentTarget.checked });\n  };\n\n  reset = () => {\n    this.setState({ name: '', tag: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Имя\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label htmlFor={this.tagInputId}>\n          Прозвище\n          <input\n            type=\"text\"\n            name=\"tag\"\n            value={this.state.tag}\n            onChange={this.handleChange}\n            id={this.tagInputId}\n          />\n        </label>\n        <p>Ваш уровень:</p>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"experience\"\n            value=\"junior\"\n            onChange={this.handleChange}\n            checked={this.state.experience === 'junior'}\n          />\n          Junior\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"experience\"\n            value=\"middle\"\n            onChange={this.handleChange}\n            checked={this.state.experience === 'middle'}\n          />\n          Middle\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"experience\"\n            value=\"senior\"\n            onChange={this.handleChange}\n            checked={this.state.experience === 'senior'}\n          />\n          Senior\n        </label>\n\n        <br />\n\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"licence\"\n            checked={this.state.licence}\n            onChange={this.handleLicenceChange}\n          />\n          Согласен с условием\n        </label>\n\n        <button type=\"submit\" disabled={!this.state.licence}>\n          Отправить\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport './Modal.scss';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    console.log('Modal componentDidMount');\n    window.addEventListener('keydown', this.heandleKeyDown);\n  }\n  componentWillUnmount() {\n    console.log('Modal componentWillUnmount');\n    window.removeEventListener('keydown', this.heandleKeyDown);\n  }\n  heandleKeyDown = e => {\n    if (e.code === 'Escape') {\n      console.log('tach ESC, close modal');\n      this.props.onClose();\n    }\n  };\n\n  heandleBackDropClick = event => {\n    // console.log('click on backdrop');\n    // console.log('currentTarget:', event.currentTarget);\n    // console.log('target', event.target);\n    if (event.currentTarget === event.target) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Modal__backdrop\" onClick={this.heandleBackDropClick}>\n        <div className=\"Modal__content\">{this.props.children}</div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n","// import logo from \"./logo.svg\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\nimport shortid from 'shortid';\nimport Dropdown from './components/Dropdown';\nimport ColorPicker from './components/ColorPicker';\nimport TodoList from './components/TodoList';\nimport TodoEditor from './components/TodoEditor';\nimport Form from './components/TodoList/Form';\n// import initialTodos from './todos.json';\nimport Container from './components/Container/Container';\nimport Modal from './components/Modal/Modal';\nimport Filter from './components/Filter';\n\nconst colorPickerOptions = [\n  { label: 'red', color: '#F44336' },\n  { label: 'green', color: '#4CAF50' },\n  { label: 'blue', color: '#2196F3' },\n  { label: 'grey', color: '#607D8B' },\n  { label: 'pink', color: '#E91E63' },\n  { label: 'indigo', color: '#3F5185' },\n];\n\nclass App extends Component {\n  state = {\n    todos: [],\n    filter: '',\n    showModal: false,\n  };\n\n  componentDidMount() {\n    // console.log('APP componentDidMounte');\n    const todos = localStorage.getItem('todos');\n    const parsedTodos = JSON.parse(todos);\n\n    if (parsedTodos) {\n      this.setState({ todos: parsedTodos });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('APP componentDidMounte');\n    if (this.state.todos !== prevState.todos) {\n      // console.log('обновилось поле todos, записываю todos в хранилище');\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = text => {\n    const todo = {\n      id: shortid.generate(),\n      text,\n      completed: false,\n    };\n\n    this.setState(({ todos }) => ({\n      todos: [todo, ...todos],\n    }));\n  };\n  deleteTodo = todoId => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  toggleCompleted = todoId => {\n    // console.log(todoId);\n    // this.setState(prevState => ({\n    //   todos: prevState.todos.map(todo => {\n    //     if (todo.id === todoId) {\n    //       return {\n    //         ...todo,\n    //         completed: !todo.completed\n    //       };\n    //     }\n    //     return todo;\n    //   }),\n    // }));\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo,\n      ),\n    }));\n  };\n\n  formSubmitHandler = data => {\n    setTimeout(() => {\n      console.log(data);\n    }, 1000);\n  };\n\n  // handleNameChange = event => {\n  //   // console.log(event.currentTarget.value);\n  //   this.setState({ name: event.currentTarget.value });\n  // }\n\n  // handleTagChange = event => {\n  //   this.setState({ tag: event.currentTarget.value });\n  // };\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleTodos = () => {\n    const { filter, todos } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return todos.filter(todo =>\n      todo.text.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  calculateCompletedTodos = () => {\n    const { todos } = this.state;\n\n    return todos.reduce(\n      (total, todo) => (todo.completed ? total + 1 : total),\n      0,\n    );\n  };\n\n  togleModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  render() {\n    const { todos, filter, showModal } = this.state;\n\n    const totalTodoCount = todos.length;\n\n    const completedTodoCount = this.calculateCompletedTodos();\n    const visibleTodos = this.getVisibleTodos();\n\n    return (\n      <Container>\n        <button type=\"button\" onClick={this.togleModal}>\n          Открытие модалки\n        </button>\n        {showModal && (\n          <Modal onClose={this.togleModal}>\n            <h1>hello, this content modal each children</h1>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est laborum\n            </p>\n            <button type=\"button\" onClick={this.togleModal}>\n              Close\n            </button>\n          </Modal>\n        )}\n        {/* <Form onSubmit={this.formSubmitHandler} /> */}\n\n        {/* {/* <input */}\n        {/* type=\"text\" */}\n        {/* value={this.state.inputValue} */}\n        {/* onChange={this.handleInputChange} /> */}\n        {/* <h1>Состояние документа</h1> */}\n        {/* <div> */}\n        {/* <p>Общее кол-во: {totalTodoCount}</p> */}\n        {/* <p>выполненных: {completedTodoCount}</p> */}\n        {/* </div> */}\n        {/* <TodoEditor onSubmit={this.addTodo} /> */}\n\n        {/* <Filter value={filter} onChange={this.changeFilter} /> */}\n        {/* <TodoList */}\n        {/* // todos={visibleTodos} */}\n        {/* // onDeleteTodo={this.deleteTodo} */}\n        {/* // onToggleCompleted={this.toggleCompleted} */}\n        {/* // /> */}\n        {/* <ColorPicker options={colorPickerOptions} /> */}\n        {/* <Counter /> */}\n        {/* <Dropdown /> */}\n      </Container>\n    );\n  }\n}\n// const App = () => (\n//   <>\n//     <h1>Состояние документа</h1>\n//     <ColorPicker options = {colorPickerOptions} />\n//     <Counter />\n//     <Dropdown />\n//     <TodoList />\n\n//   </>\n// )\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}